@echo off
::---------------------------------------------------
:: Program : Automated Microsoft SQL Database Backup
:: Version : V1.0
:: Created by : Nestor B. Gramata Jr.
:: Date: May 2, 2017
:: Filename: MicSQL_Backup@DBNAMENAME.cmd
::---------------------------------------------------
:: Description:
::  This code was originally created to work on the SQL server "INFAESAD0084\sql2008"
::  The SQL interface here uses Microsoft SQL Server 2008 R2
::  This script can run on its own and you can use it to manually create backups
::  Filename is used to extract variable information
::
:: Required Inputs/Arguments:
::  None
:: 
:: This is part of a group of files including:
::  1. MicSQL_Backup@DBNAME.cmd               (i.e. MicSQL_Backup@HR91.cmd)
::  2. CreateTask_DAYofWEEK_HHMMSS@DBNAME.cmd (i.e. CreateTask_TUE_000500@HR91.cmd)
::  3. DeleteTask@DBNAME.cmd                  (i.e. DeleteTask@HR91.cmd)
::  4. SendEmail.vbs
::  5. StoreSQLPass.cmd
::
:: IMPORTANT:
::	 Carefully change the filename
::   Create a separate empty folder where to place these 4 files! (i.e. E:\BACKUP\HR91\Automated)
::     - This is to prevent overwriting of files that may probably have the same name as that generated by the script
::   Run Script as Admin
::
:: Instructions:
::  1. Change the variable values of serverName, serverUser, and ServerPass
::  2. Change DBNAME in the filename to appropriate Database Name (i.e. HR91)
::---------------------------------------------------

REM The 3 important variables needed to connect to the database
set serverName=INFAESAD0084\sql2008
set serverUser=sa
IF NOT EXIST "%~dp0Pass.cred" (
	echo No password has been set!
	echo Set password via Config.cmd or run "StoreSQLPass.cmd
	goto:EndProg
)
	
set "psCommand=powershell -Command "^
	$encPass=type \"%~dp0Pass.cred\" ^| ConvertTo-SecureString ; ^
	$BSTR=[System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($encPass) ; ^
	[System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)""
for /F %%p in ('%pscommand%') do set ServerPass="%%p"

REM Get the name of this file
set fileName=%~n0

REM Get working dir of this file
set workingDir=%~dp0

REM Parses the fileName after @ and uses it as the DBNAME
for /f "delims=@ tokens=2" %%x in ("%fileName%") do (set DBNAME=%%x)
echo Server: %serverName%
echo User: %serverUser%
echo DB Name: %DBNAME%

REM below parameters automatically generate a filename with the current date
set day=%date:~4,2%
set month=%date:~7,2%
set year=%date:~10,4%
set "Data_DirAndFileNameNoExtension=%workingDir%..\%DBNAME%_%year%%month%%day%"
set "Logs_DirAndFileNameNoExtension=%workingDir%..\Backup_Logs\%DBNAME%_%year%%month%%day%"

REM check if folders exist
IF NOT EXIST "%workingDir%..\Backup_Logs" mkdir %workingDir%..\Backup_Logs

echo %year%%month%%day% %time% YYYYMMDD HH:MM:SS.mS >>%Logs_DirAndFileNameNoExtension%.log

REM the SQL script used in sqlcmd was generated in SQL Server (some static values were replaced with variable in order for code to be reusable)
sqlcmd -S %serverName% -d %DBNAME% -U %serverUser% -P %ServerPass% -Q "BACKUP DATABASE [%DBNAME%] TO  DISK = N'%Data_DirAndFileNameNoExtension%.bak' WITH NOFORMAT, NOINIT,  NAME = N'%DBNAME%-Full Database Backup', SKIP, NOREWIND, NOUNLOAD,  STATS = 10" >> %Logs_DirAndFileNameNoExtension%.log

REM Zip and then delete .bak file
zip -mT %Data_DirAndFileNameNoExtension%.zip %Data_DirAndFileNameNoExtension%.bak >>%Logs_DirAndFileNameNoExtension%.log
REM del %Data_DirAndFileNameNoExtension%.bak
echo/ >>%Logs_DirAndFileNameNoExtension%.log

REM Send E-mail via VBScript, 2 arguments are required
cscript.exe //NoLogo %workingDir%SendEmail.vbs "%DBNAME%" "%Logs_DirAndFileNameNoExtension%.log"

:EndProg
echo/
